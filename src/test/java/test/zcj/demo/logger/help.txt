0、Log日志：主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等等！也有利于将这些信息进行持久化（如果不将日志
	信息保存到文件或数据库，则信息便会丢失）

1、Java Logging API
	需JDK1.4版本以上才能支持。
	java.util.logging.* 包是JDK的日志记录API。
	基本概念
	?	logger – 用来记录日志的对象
	?	log level – 日志等级：从FINEST到SEVERE级别
	?	请参考JDK文档
	?	handler – 日志输出处理器，即用来将格式化后的日志信息输出，J2SE提供了下面的处理器
	?	StreamHandler – 将信息输出到一个OutputStream对象
	?	ConsoleHandler – 将信息输出到控制台
	?	FileHandler – 将信息输出到文件
	?	还有Socket处理器和内存处理器等
	?	Formater – 用来对日志信息进行格式化
	?	SimpleFormater – 简单的格式化输出
	?	XmlFormater – Xml格式化输出
	?	logManager – 日志管理器，它包含有那些被命名的logger，以及从配置文件中读取来的一些控制信息

2、Log4j

	private static Logger logger = Logger.getLogger(PingppAction.class);
	
		#DEBUG < INFO < WARN < ERROR < FATAL
	log4j.rootLogger = DEBUG,C,F
	
		#log4j.appender.C = org.apache.log4j.ConsoleAppender（控制台）
		#log4j.appender.F = org.apache.log4j.FileAppender（文件），
		#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
		#log4j.appender.R = org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
		#log4j.appender.W = org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
	log4j.appender.C = org.apache.log4j.ConsoleAppender
		#ConsoleAppender			log4j.appender.C.Target = System.out
		#DailyRollingFileAppender	log4j.appender.F.file = D:/log.txt
		#RollingFileAppender		log4j.appender.R.MaxFileSize=100KB
	log4j.appender.C.Target = System.out
		#log4j.appender.C.layout = org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
		#log4j.appender.C.layout = org.apache.log4j.HTMLLayout（以HTML表格形式布局），
		#log4j.appender.C.layout = org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
		#log4j.appender.C.layout = org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
	log4j.appender.C.layout = org.apache.log4j.PatternLayout
		#%m 输出代码中指定的消息
		#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
		#%r 输出自应用启动到输出该log信息耗费的毫秒数
		#%c 输出所属的类目，通常就是所在类的全名
		#%t 输出产生该日志事件的线程名
		#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
		#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2012-05-16 11:48:37,558
		#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
	log4j.appender.C.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%l] [%p] - %m%n
	
	log4j.appender.F = org.apache.log4j.DailyRollingFileAppender
	log4j.appender.F.file = D:/log.txt
	log4j.appender.F.layout = org.apache.log4j.PatternLayout
	log4j.appender.F.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%l] [%p] - %m%n
	
	log4j.logger.cn.zyah.trana = DEBUG(自己项目)
	log4j.logger.org.springframework = INFO(Spring的包)
	log4j.logger.org.apache.commons = ERROR(Struts1的包)
	log4j.logger.org.apache.struts = WARN(Struts1的包)
	log4j.logger.com.opensymphony.xwork2 = WARN(Struts2的包)
	log4j.logger.org.apache.struts2 = WARN(Struts2的包)
	log4j.logger.org.hibernate.ps.PreparedStatementCache = WARN(Hibernate的包)
	log4j.logger.org.hibernate = DEBUG(Hibernate的包)
	......

3、Commons log
	通用Log处理，它是一个接口抽象，底层的实现可以自动替换：

4、SFL4J
	private static final Logger log = LoggerFactory.getLogger(Foo.class);
	protected final Logger log = LoggerFactory.getLogger(getClass());
	对比：https://nofluffjuststuff.com/blog/scott_leberknight/2007/03/loggerisnotstaticfinal.html
